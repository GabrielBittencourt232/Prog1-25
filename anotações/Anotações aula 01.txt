Aula 01:

IDE = INTEGRATED DEVELOPMENT ENVIRONMENT
ASP = ACTIVE SERVER PAGES
-- RAZOR / BLAZOR 
ORM = OBJECT RELATIONAL MAPPING 
APLICAÇÃO WEB
Opera em uma arquitetura Client / Server 

DNS - DOMAIN NAME SYSTEM

HTTP / HTTPS - HYPER TEXT TRANSFER PROTOCOL (SECURE)

HTML -  HYPER TEXT MARKUP LANGUAGE



------------------------------------------------------------------------

Aula 02:

git remote add (nome) (link) - adicionar repositório remoto

git remote -v


Atividade:
Com base no exemplo feito em laboratório, com os tipos inteiros nas variáveis totalCount e userCount que foram exibidos em tela no Home/Index, contidos na classe Variaveis faça:
Na página 47 do livro é possível acesar os valores mínimos e máximos para os demais tipos númericos. Edite a classe Variaveis, crie novos atributos a ela e armazene os valores Min e Max de cada tipo númerico para em seguida exibir em tela no Home/Index.



------------------------------------------------------------------------

Aula 03:



------------------------------------------------------------------------
Aula 04:

DOM: Document Object Model

Atividade:

Crie um novo projeto ASP.NET Core Web MVC para fazer a leitura de uma entrada de dados numérica e se rcapaz de devolver à tela do usuário o número informado escrito por extenso.
Lembre-se de verificar se trata-se de UNIDADE, DEZENA, CENTENA E MILHAR.

--------------------------------------------------------------------------
Aula 05:
MVC - MODEL VIEW CONTROLLER
VIEW -
GUI - GUIDE USER INTERFACE
UI - USER X INTERFACE
UX - USER EXPERIENCE

Bootstrap

-------------------------------------------------------------------------
Aula 06:
JOGO DA VELHA
1º padrão: Linhas iguais
2º padrão: Colunas iguais
3º padrão: i + j = 2
4º padrão: j == i

-------------------------------------------------------------------------
Aula 07:
OOP 
POO - PROGRAMAÇÃO ORIENTADA A OBJETO

OOP é a base:
API - ACCES PROGRAM INTERFACE

CLASSE x OBJETO
- Classe: 
Código, palavra-chave "class"
Formada por propriedades e funções/métodos que compõem os membros da classe

- Objeto:
Uma instância de uma classe na memória do computador
Variável que possibilita o acesso aos métodos e propriedades especificadas
Ao encerrar o programa, o objeto é eliminado da memória, mas a classe permanece especificada no código fonte do programa.

Objeto != Classe

Os objetos possuem o formato especializado pela classe, porém, cada um deles podem armazenar valores diferentes em suas propriedades ocasionando comportamentos diferentes em seus métodos.

- Business Objects são as classes projetadas para solucionar problemas de um determinado domínio de aplicação do software
- Certamente teríamos uma definição de classe Consumidor em um sistema comercial, contendo nome e e-mail como propriedades, por exemplo.

Entidade 
- Entity
Qualquer coisa importante do domínio da aplicação ou do mundo real que precise ser representado como uma classe.

* Uma abordagem para projetar e construir aplicações que são:
- Flexíveis;
- Naturais;
- Bem elaboradas;
- Testáveis;
* Focada em objetos que interagem uns com os outros

Programação Orientada a Objetos

Requisito:
Você recebeu uma solicitação por e-mail de uma amiga veterinária, informando que está com problemas para gerenciar os atendimentos dos pets. Na mensagem ela diz que gostaria de ter registros dos animais, que precisa também dos dados dos seus parceiros veterinários que atendem no centro clínico para poder saber quais médicos atenderam quais animais em um determinado período de tempo, ou até mesmo, registrar quais procedimentos que foram realizados com os animais nos últimos atendimentos.

Primeiro passo: 
Inicie com os nomes

Segundo passo
- Defina os membros apropriados
- Quais são as Propriedades (dados) e os Métodos (operações) 

-Definindo Membros Apropriados-

-O Efeito TEMPO-

-------------------------------------------------------------------------

Aula 08:
			* Classes Entidades *
Organizando a Estrutura da Aplicação em CAMADAS
- Camada de Interface do Usuário
- Camada de Lógica de Negócios
- Camada de Acesso a Dados
- Camada de Código Comum

Vantagens:
- Dividir a aplicação em camados torna o trabalho simples e organizado.
- Separar a camada de negócio da interface de usuário, permite-nos mais tarde adicionar com mais tranquilidade uma interface web a nossa aplicação, por exemplo.


A Classe Customer
- A classe Customer deve ser definida como public, para que toda a aplicação consiga enxergá-la;
- Lembre-se que a classe deve ENCAPSULAR seus dados;
- O C# possui o modificador de acesso internal, ele especifica que um atributo da classe, por exemplo, ficará acessível apenas às classes que pertençam ao mesmo projeto.

Criando Objetos
- Agora que definimos a primeira classe, podemos criar instânmcias de objetos deste tipo:

- Customer: O tipo de variável é a especificação do tipo do objeto
- customer: variável objeto criada na memória.

Objetos são Tipos Referenciados

-------------------------------------------------------------------------

Aula 09:
Existem duas formas de organizar dados de maneira estruturada:

A primeira delas se chama "Escolha Delimitada" - separado por ';' coluna por coluna - utilizado no excel por exemplo

Segunda é chamada "Tamanho Fixo" - utilizada em códigos de barra

Padrão CQRS
- Commands and Queries

HTML:
DON
Document
Object
Model


Dependency Injection